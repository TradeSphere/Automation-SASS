// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id      @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
  clerkId       String        @unique
  email         String        @unique
  lastname      String?       @unique
  firstname     String?       @unique
  createdAt     DateTime      @default(now())
  plan          SUBCRIPTION_PLAN @default(FREE)
  subscription  Subscription?                        // relation to subscription
  integrations  Integrations[]
  automations   Automation[]
}

model Subscription {
  id          String     @id      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)    /// Realtion betwenn two models
  userId      String?    @unique  @db.Uuid
  plan        SUBCRIPTION_PLAN @default(FREE)
}

model Integrations {
  id          String              @id                   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        INTEGRATIONS        @default(INSTAGRAM)
  createdAt   DateTime            @default(now())
  User        User?               @relation(fields: [userId], references: [id], onDelete: Cascade)    /// Realtion betwenn two models  
  userId      String?             @db.Uuid
  token       String              @unique
  expiresAt   DateTime?    
  instagramId String?             @unique
}

model Automation {
  id          String        @id      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @default("Untitled")
  createdAt   DateTime      @default(now())
  active      Boolean       @default(false)
  trigger     Trigger[]
  listner     Listener?
  posts       Post[]
  dms         Dms[]  
  User        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)    /// Relation betwenn two models
  userId      String        @db.Uuid
  keywords    Keyword[]
}


model Dms {
  id            String        @id      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation    Automation?   @relation(fields: [automationId], references: [id] ,onDelete: Cascade)
  automationId  String?       @db.Uuid
  createdAt     DateTime      @default(now())
  senderId      String?
  reciever      String?
  message       String?
}


model Post {
  id            String        @id      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid        String
  caption       String
  media         String
  mediaType     MEDIATYPE     @default(IMAGE)
  Automation    Automation?   @relation(fields: [automationId], references: [id] ,onDelete: Cascade)
  automationId  String?       @db.Uuid
}

model Listener {
  id            String        @id      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation    Automation?   @relation(fields: [automationId], references: [id] ,onDelete: Cascade)
  automationId  String        @unique  @db.Uuid
  listener      LISTENERS     @default(MESSAGE)
  prompt        String        
  commentReply  String?
  amount        Int           @default(0)
  commentCount  Int           @default(0)
  dmCount       Int           @default(0)
}


model Trigger {
  id            String        @id      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          String        
  Automation    Automation?   @relation(fields: [automationId], references: [id] ,onDelete: Cascade)
  automationId  String?       @db.Uuid
}

model Keyword {
  id            String        @id      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word          String
  Automation    Automation?   @relation(fields: [automationId], references: [id] ,onDelete: Cascade)
  automationId  String?       @db.Uuid

  @@unique([automationId, word]) // This constraints ensure user cant use the same keyword on multiple automation
}


enum SUBCRIPTION_PLAN {
  PRO 
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}